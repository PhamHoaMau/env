# YAML for launching the orderer
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: org1-peer
  labels:
    app: org1-peer
spec:
  serviceName: org1-peer
  replicas: 1
  selector:
    matchLabels:
      app: org1-peer
  template:
    metadata:
      labels:
        app: org1-peer
    spec:
      containers:
      - name: org1-peer
        # Image used
        image: jwclabacr/org1
        # Uncomment the following during development/testing of the image
        # imagePullPolicy: Always
        volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
---
# Expose the port 7051 as ClusterIP
apiVersion: v1
kind: Service
metadata:
  name: org1-peer-clusterip

spec:
  # This defines which pods are going to be represented by this Service
  # The service becomes a network endpoint for either other services
  # or maybe external users to connect to (eg browser)
  selector:
    app: org1-peer

  ports:
    - name: org1-peer-clusterip
      port: 7051
    - name: org1-peer-cc-clusterip
      port: 7052
    - name: org1-peer-event-clusterip
      port: 7053

  type: ClusterIP

---
# Expose the port 7051 as node port -  NEEDED if you
# are interested in connecting to the Pods from the Host
# machine - keep in mind you would need the IP for the node
# port service
apiVersion: v1
kind: Service
metadata:
  name: org1-peer-nodeport

spec:
  # This defines which pods are going to be represented by this Service
  # The service becomes a network endpoint for either other services
  # or maybe external users to connect to (eg browser)
  selector:
    app: org1-peer

  ports:
    - name: org1-peer-nodeport-751
      port: 30751
      nodePort: 30751
    - name: org1-peer-cc-nodeport-752
      port: 30752
      nodePort: 30752

  type: NodePort